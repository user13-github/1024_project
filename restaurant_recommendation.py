# -*- coding: utf-8 -*-
"""Restaurant_Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GL7ob8zFOa2aklA1fY9jLttaxc5jC7cd
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
# Read the CSV file into a DataFrame
merged_dataframe = pd.read_csv('merged_dataframe.csv')

# Display the first few rows of the DataFrame
merged_dataframe.head()

"""RECOMMENDATION SYSTEM
Popularity Based Filtering
As the name suggests Popularity based recommendation system works with the trend. It basically uses the restaurants which are in trend right now. For example, if any restaurant which is usually rated by every new user then there are chances that it may suggest that restaurant to the user who just signed up.
Restaurant weighted avg formula:
Weighted Rating (WR)=[vR/(v+m)]+[mC/(v+m)]

where,
v is the number of votes for the restaurant;
m is the minimum votes required to be listed in the chart;
R is the average rating of the restaurant; and
C is the mean vote across the whole report.
Now we find the values of v,m,R,C.
"""

C= merged_dataframe['score'].mean()
m= merged_dataframe['ratings'].quantile(0.90)
Top_Restaurants = merged_dataframe.loc[merged_dataframe['ratings'] >= m]
print(f'C={C} , m={m}')
Top_Restaurants.shape #

def weighted_rating(x, m=m, C=C):
    v = x['ratings']
    R = x['score']
    return (v/(v+m) * R) + (m/(m+v) * C)

Top_Restaurants['Rank'] = Top_Restaurants.apply(weighted_rating,axis=1)


 #Sorting books based on score calculated above
Top_Books = Top_Restaurants.sort_values('Rank', ascending=False)

Top_Restaurants

#Keeping only one entry of each Restaurants
Top_Restaurants=Top_Restaurants.sort_values('Rank', ascending=False).drop_duplicates('id').sort_index()
#Sorting Restaurants based on score calculated above
Top_Restaurants = Top_Restaurants.sort_values('Rank', ascending=False)
Top_Restaurants

import matplotlib.cm as cm
top_Restaurants_subset = Top_Restaurants[['name_x', 'ratings', 'score', 'Rank']].reset_index(drop=True).head(5)

# Applying background gradient to the DataFrame
styled_top_Restaurants = top_Restaurants_subset.style.background_gradient(cmap=cm.get_cmap('viridis'))

# Display the styled DataFrame
styled_top_Restaurants

